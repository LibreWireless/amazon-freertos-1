from __future__ import print_function
import sys
import struct
import xml.etree.ElementTree as ET

proj_dir = sys.argv[1]
xmlfile = proj_dir + "\envitem.xml"
logfile = proj_dir + "\pylog.txt"
sys.stdout = open(logfile, "w")

tree = ET.parse(xmlfile)
root = tree.getroot()

MaxUID = len(root.findall('attribute')) - 1

Offset = 0x0
EnvHeaderSize = 12
StartEntryAddress = ((MaxUID + 1) * 8) + Offset + EnvHeaderSize
sizeOfEntryHeader = 8
NullPtr = 0xFFFFFFFF
validEntry = 0xFF00
name = "ENV\0".encode()

out_filename = proj_dir + "\env.bin"
header_filename = proj_dir + "\env_uid.h"
print(out_filename, header_filename)

with open(out_filename, 'wb') as outfile:
	outfile.seek(0,0)
	outfile.write(name)
	outfile.write(struct.pack('<I', MaxUID))	
	outfile.write(struct.pack('<I', Offset))
		
	Address = StartEntryAddress
	print(name,MaxUID,hex(Offset),hex(Address))
	for attribute in root.findall('attribute'):
		print("adress at the loop 0x",hex(Address));
		uid = attribute.find('UID').text
		x = int(uid)
		padding = 0
		NotAligned = (Address  & 3)
		if (NotAligned) :
			padding = 4 - NotAligned
		Address = Address + padding
		print("padding uid address\n", padding, x,hex(Address))
		outfile.write(struct.pack('<I', x))
		outfile.write(struct.pack('<I', Address))
		value = attribute.find('value').text
		if (value) != None:
			string = value.encode()
		else :
			string = "\0\0\0"
		Address = Address + sizeOfEntryHeader + len(string) + 1
		


		
	for attribute in root.findall('attribute'):
		value = attribute.find('value').text
		if (value) != None:
			string = value.encode()
		else :
			string = "\0\0\0".encode()

		outfile.write(struct.pack('<I', NullPtr))
		outfile.write(struct.pack('<H', validEntry))
		length = len(string) + 1
		NotAligned = (length  & 3)
		padding = 0
		if (NotAligned) :
			padding = 4 - NotAligned	
		print("string padding uid\n", padding, x)
		length = length + padding
		
		outfile.write(struct.pack('<H', length))
		outfile.write(string)
		
		padding = padding + 1
		
		while padding:
			outfile.write(struct.pack('<B', 0))
			padding -= 1

with open(header_filename, 'w') as headerfile:
	headerfile.seek(0,0)
	Maxlength = 0
	headerfile.write("\n")
	headerfile.write("/****************************************************************************/\n")
	headerfile.write("/* Mavid Platform \n")
	headerfile.write("   ENV ID definitions created by python script: CreateEnv.py \n")
	headerfile.write("   Edit envitem.xml to add new ENV.\n")
	headerfile.write("   Do not edit this file. */\n")
	headerfile.write("/****************************************************************************/\n")

	
	for attribute in root.findall('attribute'):
		name = attribute.find('name').text
		if len(name) > Maxlength : 
			Maxlength = len(name)
	
	for attribute in root.findall('attribute'):
		name = attribute.find('name').text
		uid = attribute.find('UID').text
		headerfile.write("#define ENV_")
		headerfile.write(name)
		headerfile.write("_ID")
		align_space = Maxlength - len(name) + 4
		headerfile.write(uid.rjust(align_space))
		headerfile.write("\n")

from shutil import copyfile
dst_file = proj_dir + "env_uid.h"

print(dst_file)
copyfile(header_filename, dst_file)

print("ENV Creation successful \n")
